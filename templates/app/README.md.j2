# Docker container for {{ defs.app.friendly_name }}
[![Docker Automated build](https://img.shields.io/docker/automated/jlesage/{{ defs.app.name }}.svg)](https://hub.docker.com/r/jlesage/{{ defs.app.name }}/) [![](https://images.microbadger.com/badges/image/jlesage/{{ defs.app.name }}.svg)](http://microbadger.com/#/images/jlesage/{{ defs.app.name }} "Get your own image badge on microbadger.com") [![Build Status](https://travis-ci.org/jlesage/docker-{{ defs.app.name }}.svg?branch=master)](https://travis-ci.org/jlesage/docker-{{ defs.app.name }}) [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://paypal.me/JocelynLeSage)

This is a Docker container for {{ defs.app.friendly_name }}.
{% for item in defs.app.container.overview %}

{{ item }}
{% endfor %}
{% if defs.app.documentation.important %}

{{ defs.app.documentation.important }}
{% endif %}

---

[![{{ defs.app.friendly_name }} logo](https://images.weserv.nl/?url=raw.githubusercontent.com/jlesage/docker-templates/master/jlesage/images/{{ defs.app.name }}-icon.png&w=200)]({{ defs.app.project.url }})[![{{ defs.app.friendly_name }}](https://dummyimage.com/400x110/ffffff/575757&text={{ defs.app.friendly_name|replace(' ', '+') }})]({{ defs.app.project.url }})

{{ defs.app.project.description }}

---

## Quick Start

Launch the {{ defs.app.friendly_name }} docker container with the following command:
```
docker run -d \
    --name={{ defs.app.name }} \
    -p 5800:5800 \
    -p 5900:5900 \
{% for item in defs.container.volumes.volume if item.limit_doc_to|default('none') != 'baseimage' %}
  {% if item.container_path in defs.app.container.unsupported_volume %}{% continue %}{% endif %}
  {% if item.include_in_quick_start == 'true' %}
    -v {{ item.host_path_example }}:{{ item.container_path }}:{{ item.permissions }} \
  {% endif %}
{% endfor %}
{% for item in defs.container.devices.device if item.limit_doc_to|default('none') != 'baseimage' %}
  {% if item.include_in_quick_start == 'true' %}
    --device {{ item.path }} \
  {% endif %}
{% endfor %}
    jlesage/{{ defs.app.name }}
```

Where:
{% for item in defs.container.volumes.volume if item.limit_doc_to|default('none') != 'baseimage' %}
  {% if item.container_path in defs.app.container.unsupported_volume %}{% continue %}{% endif %}
  {% if item.include_in_quick_start == 'true' %}
  - `{{ item.host_path_example }}`: {{ item.description }}
  {% endif %}
{% endfor %}
{% for item in defs.container.devices.device if item.limit_doc_to|default('none') != 'baseimage' %}
  {% if item.include_in_quick_start == 'true' %}
  - `{{ item.path }}`: {{ item.description }}
  {% endif %}
{% endfor %}

Browse to `http://your-host-ip:5800` to access the {{ defs.app.friendly_name }} GUI.  Files from
the host appear under the `/storage` folder in the container.

## Usage

```
docker run [-d] \
    --name={{ defs.app.name }} \
    [-e <VARIABLE_NAME>=<VALUE>]... \
    [-v <HOST_DIR>:<CONTAINER_DIR>[:PERMISSIONS]]... \
    [-p <HOST_PORT>:<CONTAINER_PORT>]... \
    jlesage/{{ defs.app.name }}
```
| Parameter | Description |
|-----------|-------------|
| -d        | Run the container in background.  If not set, the container runs in foreground. |
| -e        | Pass an environment variable to the container.  See the [Environment Variables](#environment-variables) section for more details. |
| -v        | Set a volume mapping (allows to share a folder/file between the host and the container).  See the [Data Volumes](#data-volumes) section for more details. |
| -p        | Set a network port mapping (exposes an internal container port to the host).  See the [Ports](#ports) section for more details. |

### Environment Variables

To customize some properties of the container, the following environment
variables can be passed via the `-e` parameter (one for each variable).  Value
of this parameter has the format `<VARIABLE_NAME>=<VALUE>`.

| Variable       | Description                                  | Default |
|----------------|----------------------------------------------|---------|
{% for item in defs.container.environment_variables.environment_variable if item.limit_doc_to|default('none') != 'baseimage' %}
|`{{ item.name }}`| {{ item.description }} | {% if item.default %}`{{ item.default }}`{% else %}(unset){% endif %} |
{% endfor %}

### Data Volumes

The following table describes data volumes used by the container.  The mappings
are set via the `-v` parameter.  Each mapping is specified with the following
format: `<HOST_DIR>:<CONTAINER_DIR>[:PERMISSIONS]`.

| Container path  | Permissions | Description |
|-----------------|-------------|-------------|
{% for item in defs.container.volumes.volume if item.limit_doc_to|default('none') != 'baseimage' %}
  {% if item.container_path in defs.app.container.unsupported_volume %}{% continue %}{% endif %}
  {% if item.description %}
|`{{ item.container_path }}`| {{ item.permissions }} | {{ item.description }} |
  {% endif %}
{% endfor %}

### Ports

Here is the list of ports used by the container.  They can be mapped to the host
via the `-p` parameter (one per port mapping).  Each mapping is defined in the
following format: `<HOST_PORT>:<CONTAINER_PORT>`.  The port number inside the
container cannot be changed, but you are free to use any port on the host side.

| Port | Mapping to host | Description |
|------|-----------------|-------------|
{% for item in defs.container.ports.port if item.limit_doc_to|default('none') != 'baseimage' %}
| {{ item.number }} | {{ 'Mandatory' if item.mandatory == 'true' else 'Optional' }} | {{ item.description }} |
{% endfor %}

## Docker Compose File
Here is an example of a `docker-compose.yml` file that can be used with
[Docker Compose](https://docs.docker.com/compose/overview/):
```yaml
version: '3'
services:
  {{ defs.app.name }}:
    build: .
    ports:
{% for item in defs.container.ports.port if item.limit_doc_to|default('none') != 'baseimage' %}
      - "{{ item.number }}:{{ item.number }}"
{% endfor %}
{% set param_name_printed = [False] %}
{% for item in defs.container.volumes.volume if item.limit_doc_to|default('none') != 'baseimage' %}
  {% if item.container_path in defs.app.container.unsupported_volume %}{% continue %}{% endif %}
  {% if item.include_in_quick_start == 'true' %}
    {% if not param_name_printed[0] %}
      {% set _ = param_name_printed.append(not param_name_printed.pop()) %}
    volumes:
    {% endif %}
      - "{{ item.host_path_example }}:{{ item.container_path }}:{{ item.permissions }}"
  {% endif %}
{% endfor %}
{% set param_name_printed = [False] %}
{% for item in defs.container.devices.device if item.limit_doc_to|default('none') != 'baseimage' %}
  {% if item.include_in_quick_start == 'true' %}
    {% if not param_name_printed[0] %}
      {% set _ = param_name_printed.append(not param_name_printed.pop()) %}
    devices:
    {% endif %}
      - "{{ item.path }}:{{ item.path }}"
  {% endif %}
{% endfor %}
```

## Docker Image Update

If the system on which the container runs doesn't provide a way to easily update
the Docker image, the following steps can be followed:

  1. Fetch the latest image:
```
docker pull jlesage/{{ defs.app.name }}
```
  2. Stop the container:
```
docker stop {{ defs.app.name }}
```
  3. Remove the container:
```
docker stop {{ defs.app.name }}
```
  4. Start the container using the `docker run` command.

## User/Group IDs

When using data volumes (`-v` flags), permissions issues can occur between the
host and the container.  For example, the user within the container may not
exists on the host.  This could prevent the host from properly accessing files
and folders on the shared volume.

To avoid any problem, you can specify the user the application should run as.

This is done by passing the user ID and group ID to the container via the
`USER_ID` and `GROUP_ID` environment variables.

To find the right IDs to use, issue the following command on the host, with the
user owning the data volume on the host:

    id <username>

Which gives an output like this one:
```
uid=1000(myuser) gid=1000(myuser) groups=1000(myuser),4(adm),24(cdrom),27(sudo),46(plugdev),113(lpadmin)
```

The value of `uid` (user ID) and `gid` (group ID) are the ones that you should
be given the container.

## Accessing the GUI

Assuming that container's ports are mapped to the same host's ports, the
graphical interface of the application can be accessed via:

  * A web browser:
```
http://<HOST IP ADDR>:5800
```

  * Any VNC client:
```
<HOST IP ADDR>:5900
```

## Security

By default, access to the application's GUI is done over an unencrypted
connection (HTTP or VNC).

Secure connection can be enabled via the `SECURE_CONNECTION` environment
variable.  See the [Environment Variables](#environment-variables) section for
more details on how to set an environment variable.

When enabled, application's GUI is performed over an HTTPs connection when
accessed with a browser.  All HTTP accesses are automatically redirected to
HTTPs.

When using a VNC client, the VNC connection is performed over SSL.  Note that
few VNC clients support this method.  [SSVNC] is one of them.

### Certificates

Here are the certificate files needed by the container.  By default, when they
are missing, self-signed certificates are generated and used.  All files have
PEM encoded, x509 certificates.

| Container Path                  | Purpose                    | Content |
|---------------------------------|----------------------------|---------|
|`/config/certs/vnc-server.pem`   |VNC connection encryption.  |VNC server's private key and certificate, bundled with any root and intermediate certificates.|
|`/config/certs/web-privkey.pem`  |HTTPs connection encryption.|Web server's private key.|
|`/config/certs/web-fullchain.pem`|HTTPs connection encryption.|Web server's certificate, bundled with any root and intermediate certificates.|

**NOTE**: To prevent any certificate validity warnings/errors from the browser
or VNC client, make sure to supply your own valid certificates.

**NOTE**: Certificate files are monitored and relevant daemons are automatically
restarted when changes are detected.

### VNC Password

To restrict access to your application, a password can be specified.  This can
be done via two methods:
  * By using the `VNC_PASSWORD` environment variable.
  * By creating a `.vncpass_clear` file at the root of the `/config` volume.
    This file should contains the password in clear-text.  During the container
    startup, content of the file is obfuscated and moved to `.vncpass`.

The level of security provided by the VNC password depends on two things:
  * The type of communication channel (encrypted/unencrypted).
  * How secure access to the host is.

When using a VNC password, it is highly desirable to enable the secure
connection to prevent sending the password in clear over an unencrypted channel.

**ATTENTION**: Password is limited to 8 characters.  This limitation comes from
the Remote Framebuffer Protocol [RFC](https://tools.ietf.org/html/rfc6143) (see
section [7.2.2](https://tools.ietf.org/html/rfc6143#section-7.2.2)).  Any
characters beyhond the limit are ignored.
{% for item in defs.app.documentation.section %}

{% for i in range(item.title['@level']|int) %}#{% endfor %} {{ item.title['#text'] }}
  {% if item.content %}

{{ item.content }}
  {% endif %}
{% endfor %}

{% for item in defs.documentation.link|list + defs.app.documentation.link|list %}
[{{ item.name }}]: {{ item.url }}
{% endfor %}

## Support or Contact

Having troubles with the container or have questions?  Please
[create a new issue].

[create a new issue]: https://github.com/jlesage/docker-{{ defs.app.name }}/issues
